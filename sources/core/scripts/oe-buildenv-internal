#!/bin/sh

# OE-Core Build Environment Setup Script
#
# Copyright (C) 2006-2011 Linux Foundation
#
# SPDX-License-Identifier: GPL-2.0-or-later
#

# ! ==> 逻辑否
# 标准输出(0) 标准输出(1) 错误输出(2) ==> 标准输入默认是键盘，标准输出和错误输出默认是屏幕
# 2>&1:将文件描述符2重定向到文件描述符1，此时标准输出是屏幕。该指令的效果是标准输出和错误输出都输出到屏幕
# return命令会使一个函数返回,会返回一个单一的数字参数,而这个数字参数在调用这个函数的脚本是可见的,如果没有指定返回参数,return在默认情况下会返回上一次命令的返回代码
# return 的作用是退出当前函数，不退出整个脚本
if ! $(return >/dev/null 2>&1) ; then
    echo 'oe-buildenv-internal: error: this script must be sourced'
    echo ''
    echo 'Usage: . $OEROOT/scripts/oe-buildenv-internal &&'
    echo ''
    echo 'OpenEmbedded oe-buildenv-internal - an internal script that is'
    echo 'used in oe-init-build-env to initialize oe build environment'
    echo ''
    exit 2
fi

#  -z xxx ==> 如果 string xxx 为空，则为TRUE
# $OEROOT ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core
# It is assumed OEROOT is already defined when this is called
if [ -z "$OEROOT" ]; then
    echo >&2 "Error: OEROOT is not defined!"
    return 1
fi

#  -z xxx ==> 如果 string xxx 为空，则为TRUE
# $OE_SKIP_SDK_CHECK ==>  为空 
# $OECORE_SDK_VERSION ==>  为空 
if [ -z "$OE_SKIP_SDK_CHECK" ] && [ -n "$OECORE_SDK_VERSION" ]; then
    echo >&2 "Error: The OE SDK/ADT was detected as already being present in this shell environment. Please use a clean shell when sourcing this environment script."
    return 1
fi

# 下面语句的作用是检查python的版本
# We potentially have code that doesn't parse correctly with older versions 
# of Python, and rather than fixing that and being eternally vigilant for 
# any other new feature use, just check the version here.
py_v35_check=$(python3 -c 'import sys; print(sys.version_info >= (3,5,0))')
if [ "$py_v35_check" != "True" ]; then
    echo >&2 "BitBake requires Python 3.5.0 or later as 'python3 (scripts/install-buildtools can be used if needed)'"
    return 1
fi
unset py_v35_check

# [ -z STRING ] “STRING” 的长度为零则为真。
# [ -n STRING ] or [ STRING ] “STRING” 的长度为非零non-zero 则为真
# $BDIR ==> 为空
# $1 ==> 为空
if [ -z "$BDIR" ]; then # $BDIR ==> 为空 ==> 走下面的分支
    if [ -z "$1" ]; then # $1 ==> 为空 ==> 走下面的分支
        BDIR="build"  # BDIR = "build" 
    else
        BDIR="$1"
        if [ "$BDIR" = "/" ]; then
            echo >&2 "Error: / is not supported as a build directory."
            return 1
        fi

        # Remove any possible trailing slashes. This is used to work around
        # buggy readlink in Ubuntu 10.04 that doesn't ignore trailing slashes
        # and hence "readlink -f new_dir_to_be_created/" returns empty.
        BDIR=$(echo $BDIR | sed -re 's|/+$||')

        BDIR=$(readlink -f "$BDIR")
        if [ -z "$BDIR" ]; then
            PARENTDIR=$(dirname "$1")
            echo >&2 "Error: the directory $PARENTDIR does not exist?"
            return 1
        fi
    fi
    if [ -n "$2" ]; then # $2 为空，所以走不进去下面的分支
        BITBAKEDIR="$2"
    fi
fi

# 代码如下:
# file=/dir1/dir2/dir3/my.file.txt
# 可以用${ }分别替换得到不同的值： ==> file是对应的要处理的变量名
# ${file#*/}：删掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt
# ${file##*/}：删掉最后一个 /  及其左边的字符串：my.file.txt
# ${file#*.}：删掉第一个 .  及其左边的字符串：file.txt
# ${file##*.}：删掉最后一个 .  及其左边的字符串：txt
# ${file%/*}：删掉最后一个  /  及其右边的字符串：/dir1/dir2/dir3
# ${file%%/*}：删掉第一个 /  及其右边的字符串：(空值)
# ${file%.*}：删掉最后一个  .  及其右边的字符串：/dir1/dir2/dir3/my.file
# ${file%%.*}：删掉第一个  .   及其右边的字符串：/dir1/dir2/dir3/my
# 记忆的方法为：
# # 是 去掉左边（键盘上#在 $ 的左边）
# %是去掉右边（键盘上% 在$ 的右边）
# 单一符号是最小匹配；两个符号是最大匹配
# ${file:0:5}：提取最左边的 5 个字节：/dir1
# ${file:5:5}：提取第 5 个字节右边的连续5个字节：/dir2
# 也可以对变量值里的字符串作替换：
# ${file/dir/path}：将第一个dir 替换为path：/path1/dir2/dir3/my.file.txt
# ${file//dir/path}：将全部dir 替换为 path：/path1/path2/path3/my.file.txt
# 
# ${BDIR#/ ==> build
# $BDIR    ==> build
# 
if [ "${BDIR#/}" != "$BDIR" ]; then
    BUILDDIR="$BDIR"
else
    # BUILDDIR ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/build
    BUILDDIR="$(pwd)/$BDIR"
fi
unset BDIR

# $BITBAKEDIR ==> 为空
if [ -z "$BITBAKEDIR" ]; then  #  $BITBAKEDIR ==> 为空 ==> 可以走入下面的分支
    BITBAKEDIR="$OEROOT/bitbake$BBEXTRA"  # BITBAKEDIR ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake
    # test -d xxx ==> 测试 xxx是否为目录
    # xxx是目录的话，就不执行 || 后面的语句，否则的话，执行 || 后面的语句，为BITBAKEDIR重新赋值
    test -d "$BITBAKEDIR" || BITBAKEDIR="$OEROOT/../bitbake$BBEXTRA"
    # 最终 BITBAKEDIR ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake
fi

# echo $BITBAKEDIR ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake
# echo $BUILDDIR ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/build
# echo $BBPATH  ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/build
BITBAKEDIR=$(readlink -f "$BITBAKEDIR")
BUILDDIR=$(readlink -f "$BUILDDIR")
BBPATH=$BUILDDIR
export BBPATH

# if -d ==> 如果filename为目录，则为真 
# ! 进行逻辑取反 
# if [ ! -d "$BITBAKEDIR" ] ==> 也就是如果 $BITBAKEDIR 不是一个目录，则执行下面的分支
if [ ! -d "$BITBAKEDIR" ]; then
    echo >&2 "Error: The bitbake directory ($BITBAKEDIR) does not exist!  Please ensure a copy of bitbake exists at this location or specify an alternative path on the command line"
    return 1
fi

# Add BitBake's library to PYTHONPATH
# echo  $PYTHONPATH ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake/lib:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake/lib:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake/lib:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake/lib:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake/lib:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake/lib:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake/lib:
PYTHONPATH=$BITBAKEDIR/lib:$PYTHONPATH
export PYTHONPATH

# Make sure our paths are at the beginning of $PATH
for newpath in "$BITBAKEDIR/bin" "$OEROOT/scripts"; do
    # $newpath ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake/bin
    #              /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/scripts
    # Remove any existences of $newpath from $PATH
    # sed -re ==> -r：sed 的动作支持的是延伸型正规表示法的语法；-r  可以识别正则表达式
    #             -e：expression, 表示后面是表达式，直接在命令列模式上进行 sed 的动作编辑; 识别多个匹配条件或指令
    #              #：指定的行   
    #              $：最后一行
    #
    # 这是一个使用Shell脚本的命令，用于修改环境变量`$PATH`中的路径。让我们逐步解释这个命令：
    # 
    # 1. `echo $PATH`：这部分命令会打印出当前环境变量`$PATH`的值。`$PATH`是一个包含多个目录路径的环境变量，用于指定系统在哪些目录中查找可执行文件。
    # 
    # 2. `sed -re "s#(^|:)$newpath(:|$)#\2#g"`：这部分命令使用`sed`命令进行替换操作。`sed`是一个流编辑器，用于对文本进行处理和转换。
    #    - `-r`选项表示使用扩展正则表达式语法。
    #    - `-e`选项表示接下来的参数是一个脚本命令。
    #    - `"s#(^|:)$newpath(:|$)#\2#g"`是一个替换命令，它的作用是将`$newpath`从`$PATH`中移除。
    #      - `(^|:)`表示匹配行首或者冒号（`:`）之前的位置。
    #      - `($|:)`表示匹配行尾或者冒号（`:`）之后的位置。
    #      - `\2`表示对应替换命令中的第二个捕获组，即`(:|$)`中的内容。这样可以保留行尾的冒号（如果有的话）。
    # 
    # 3. `s#^:##`：这部分命令是另一个替换命令，它的作用是将行首的冒号（如果有的话）移除。
    #    - `^:`表示匹配行首的冒号。
    #    - `##`表示替换为空字符串，即移除匹配到的冒号。
    # 
    # 综合起来，这个命令的目的是将环境变量`$PATH`中的指定路径`$newpath`移除，并移除行首的冒号（如果有的话）。这样可以修改`$PATH`，使得系统在查找可执行文件时不再包含该路径。
    #
    # 基本格式是  sed -re "s#xxx#yyy#g" ==>g表示全局替换
    # xxx是准备要替换的内容，可以用正则表达式，yyy不能用正则表达式，g也可以不用，g是全局替换，工作中大多数用g
    # https://blog.csdn.net/weixin_38214171/article/details/131168461
    PATH=$(echo $PATH | sed -re "s#(^|:)$newpath(:|$)#\2#g;s#^:##")

    # Add $newpath to $PATH
    PATH="$newpath:$PATH"
done
unset BITBAKEDIR newpath

# Used by the runqemu script
# echo $BUILDDIR ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/build
# echo $PATH ==> /home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/scripts:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/sources/core/bitbake/bin:/home/hpsp/.local/bin:/home/hpsp/rock_space/arm_none_tools/gcc-arm-none-eabi-10.3-2021.10/bin:/home/hpsp/rock_space/rockpi_4b/rockchip_tools/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin:/home/hpsp/rock_space/qemu/aarch64_crosstools/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin:/home/hpsp/rock_space/qemu/aarch64_be_crosstools/gcc-arm-10.3-2021.07-x86_64-aarch64_be-none-linux-gnu/bin:/home/hpsp/rock_space/iMX6Q_files/compile_tools/gcc-linaro_arm-linux-gnueabihf/bin:/home/hpsp/rock_space/gdb/gdb-8.3/gdb:/home/hpsp/rock_space/uboot_code/crosstool-ng-1.24.0/.build/arm-hpsp-linux-gnueabi/buildtools/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/hpsp/.fzf/bin:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/scripts:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/scripts:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/scripts:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/scripts:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/scripts:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/scripts:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/scripts:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/scripts:/home/hpsp/rock_space/xen_yocto/yocto_script_analysis/scripts
export BUILDDIR
export PATH

BB_ENV_EXTRAWHITE_OE="MACHINE DISTRO TCMODE TCLIBC HTTP_PROXY http_proxy \
HTTPS_PROXY https_proxy FTP_PROXY ftp_proxy FTPS_PROXY ftps_proxy ALL_PROXY \
all_proxy NO_PROXY no_proxy SSH_AGENT_PID SSH_AUTH_SOCK BB_SRCREV_POLICY \
SDKMACHINE BB_NUMBER_THREADS BB_NO_NETWORK PARALLEL_MAKE GIT_PROXY_COMMAND \
SOCKS5_PASSWD SOCKS5_USER SCREENDIR STAMPS_DIR BBPATH_EXTRA BB_SETSCENE_ENFORCE \
BB_LOGCONFIG"


# 这段代码是一个Shell命令，主要用于对变量进行处理和去重。让我们逐步解析它：
# 
# 1. `$(echo $BB_ENV_EXTRAWHITE $BB_ENV_EXTRAWHITE_OE)`：这部分代码使用`echo`命令将两个变量`$BB_ENV_EXTRAWHITE`和`$BB_ENV_EXTRAWHITE_OE`的值输出。`$()`是命令替换的语法，它会将命令的输出作为整个表达式的结果。
# 
# 2. `tr ' ' '\n'`：这部分代码使用`tr`命令将空格字符（' '）替换为换行符（'\n'），从而将输出的值分隔为多行。
# 
# 3. `LC_ALL=C sort --unique`：这部分代码使用`sort`命令对多行的值进行排序，并使用`--unique`选项去除重复的行。`LC_ALL=C`是为了确保排序按照字节顺序进行，而不是根据本地化设置。
# 
# 4. `tr '\n' ' '`：最后，这部分代码使用`tr`命令将排序和去重后的多行值重新合并为单行，并将换行符（'\n'）替换为空格字符（' '）。
# 
# 综合起来，这段代码的作用是将两个变量的值合并，并去除重复的值，最后将结果输出为单行，每个值之间用空格分隔。
# BB_ENV_EXTRAWHITE ==> ALL_PROXY BBPATH_EXTRA BB_LOGCONFIG BB_NO_NETWORK BB_NUMBER_THREADS BB_SETSCENE_ENFORCE BB_SRCREV_POLICY DISTRO FTPS_PROXY FTP_PROXY GIT_PROXY_COMMAND HTTPS_PROXY HTTP_PROXY MACHINE NO_PROXY PARALLEL_MAKE SCREENDIR SDKMACHINE SOCKS5_PASSWD SOCKS5_USER SSH_AGENT_PID SSH_AUTH_SOCK STAMPS_DIR TCLIBC TCMODE all_proxy ftp_proxy ftps_proxy http_proxy https_proxy no_proxy
BB_ENV_EXTRAWHITE="$(echo $BB_ENV_EXTRAWHITE $BB_ENV_EXTRAWHITE_OE | tr ' ' '\n' | LC_ALL=C sort --unique | tr '\n' ' ')"

export BB_ENV_EXTRAWHITE
